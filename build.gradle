buildscript {
    repositories {
        jcenter()
        maven { url "http://www.datanucleus.org/downloads/maven2/" }
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url "http://artifactory.vmcommerce.intra/artifactory/libs-release" }
        maven { url "http://artifactory.vmcommerce.intra/artifactory/libs-snapshot" }
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'oracle:ojdbc6:11.2.0.3'
        classpath "org.yaml:snakeyaml:1.15"
    }
}

plugins {
    id 'java'
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id 'org.liquibase.gradle' version '1.2.4'
    id 'net.researchgate.release' version '2.4.0'
    id "org.sonarqube" version "2.5"
    id 'org.springframework.boot' version '1.5.6.RELEASE'
}

apply plugin: 'docker'

ext {
    springBootVersion = '1.5.6.RELEASE'
    springFoxVersion = '2.7.0'
    hibernateVersion = '5.0.12.Final'
    healthcheckVersion = '1.5.3'
    camelVersion ='2.19.2'
    elasticSearchVersion ='5.5.2'
    feignVersion ='9.3.1'
    keycloakVersion = '3.3.0.CR2'
}

repositories {
    mavenLocal()
    maven { url "http://www.datanucleus.org/downloads/maven2/" }
    maven { url "http://artifactory.vmcommerce.intra/artifactory/libs-release" }
    maven { url "http://artifactory.vmcommerce.intra/artifactory/libs-snapshot" }
    jcenter()
}

bootRun {
    jvmArgs = ["-Dspring.profiles.active=${project.env}"]
}

docker {
    maintainer = "Feeds - Walmart"
    // TODO[r0i001q]: Configurar push para registry do walmart
//    registry = "docker-registry.qa.vmcommerce.intra"
}

release {
    git {
        requireBranch = 'master'
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Feeds Admin Api"
        property "sonar.projectKey", "$archivesBaseName"
    }
}

liquibase {
    activities {
        prod {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            contexts 'prod'
            url 'jdbc:oracle:thin:@nae1-scan.vmcommerce.intra:1521/WAL01'
            username "$System.env.FEEDS_DB_USER"
            password "$System.env.FEEDS_DB_PASSWD"
        }

        stg {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            contexts 'prod'
            url 'jdbc:oracle:thin:@nae1-stg-scan.stg.vmcommerce.intra:1521/WAL01'
            username "$System.env.FEEDS_DB_USER"
            password "$System.env.FEEDS_DB_PASSWD"
        }

        qa {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            contexts 'qa'
            url 'jdbc:oracle:thin:@napsao-qa-nix-melf-oracle-1.qa.vmcommerce.intra:1521/MELF'
            username "$System.env.FEEDS_DB_USER"
            password "$System.env.FEEDS_DB_PASSWD"
        }

        local {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url 'jdbc:oracle:thin:@localhost:1521/xe'
            contexts 'local'
            username "$System.env.FEEDS_DB_USER"
            password "$System.env.FEEDS_DB_PASSWD"
        }

    }
    runList = project.ext.runList
}

task buildDocker(type: Docker) {

    push = false
    dockerfile = file('docker/Dockerfile')
    applicationName = project.name

    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task printProjectVersion() {
    println project.version
}

task updateProjectVersionYAML << {
    ant.replaceregexp(match:'version: \\d+\\.\\d+\\.\\d+(-SNAPSHOT)?', replace:"version: ${project.version}", flags:'g', byline:true) {
        fileset(dir: 'src/main/resources', includes: 'application.yml')
    }
    println "### New version set in application.yml version=${project.version} ###"
}

beforeReleaseBuild.dependsOn updateProjectVersionYAML
commitNewVersion.dependsOn updateProjectVersionYAML

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-elasticsearch:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    compile "com.walmart:wmapp-springboot-healthcheck:${healthcheckVersion}"
    compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}"

    compile "org.keycloak:keycloak-spring-boot-starter:${keycloakVersion}"

    compile "io.github.openfeign:feign-okhttp:${feignVersion}"
    compile "io.github.openfeign:feign-jackson:${feignVersion}"
    compile "io.github.openfeign:feign-slf4j:${feignVersion}"

    compile "org.hibernate:hibernate-java8:${hibernateVersion}"
    compile "oracle:ojdbc6:11.2.0.3"

    compile "io.springfox:springfox-swagger2:${springFoxVersion}"
    compile "io.springfox:springfox-swagger-ui:${springFoxVersion}"
    compile 'de.siegmar:logback-gelf:1.0.4'
    compile "org.apache.camel:camel-spring-boot-starter:${camelVersion}"
    compile "org.apache.camel:camel-csv:${camelVersion}"
    compile ("org.apache.camel:camel-spring-security:${camelVersion}") {
        exclude module: "org.springframework.security"
    }

    compile "com.h2database:h2:1.3.160"

    compile "org.apache.camel:camel-bindy:${camelVersion}"
    compile "commons-io:commons-io:2.5"
    compile "javax.cache:cache-api:1.0.0"
    compile "org.ehcache:ehcache:3.1.0"
    
    compile "org.quartz-scheduler:quartz:2.2.1"
    compile "org.quartz-scheduler:quartz-jobs:2.2.1"
    compile "org.springframework:spring-context-support"

    testCompile "br.com.six2six:fixture-factory:3.1.0"
    testCompile "org.apache.camel:camel-test-spring:${camelVersion}"
}